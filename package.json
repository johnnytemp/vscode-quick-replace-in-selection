{
	"name": "quick-replace-in-selection",
	"displayName": "Quick Replace In Selection",
	"description": "Search and replace by a regular expression in current selection with quick steps",
	"version": "1.0.0",
	"engines": {
		"vscode": "^1.47.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onCommand:quick-replace-in-selection.replaceInSelection",
		"onCommand:quick-replace-in-selection.replaceInSelectionByRule"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "quick-replace-in-selection.replaceInSelection",
				"title": "Quick Replace In Selection"
			},
			{
				"command": "quick-replace-in-selection.replaceInSelectionByRule",
				"title": "Quick Replace In Selection (Use rule)..."
			}
		],
		"configuration": {
			"title": "Quick Replace In Selection configurations",
			"properties": {
				"quick-replace.rules": {
					"type": "object",
					"description": "The rules for command Quick Replace In Selection (Use rule)...",
					"default": {
						"Decode basic html entities (incomplete)": {
							"find": ["&lt;", "&gt;", "&quot;", "&apos;", "&amp;"],
							"replace": ["<", ">", "\"", "'", "&"]
						},
						"Encode html entities (minimal)": {
							"find": ["&", "<", ">", "\"", "'"],
							"replace": ["&amp;", "&lt;", "&gt;", "&quot;", "&apos;"]
						},
						"Escape literal string for PCRE/extended regular expression": {
							"find": ["\\\\", "[\\]{}(|)[.*+?^$]"],
							"replace": ["\\\\", "\\$&"]
						},
						"Json stringify": {
							"find": ["\\\\", "\"", "\n", "\r", "\t", "^", "$"],
							"replace": ["\\\\", "\\\"", "\\n", "\\r", "\\t", "\"", "\""]
						},
						"Json stringify (also escape '/')": {
							"find": ["\\\\", "\"", "\n", "\r", "\t", "/", "^", "$"],
							"replace": ["\\\\", "\\\"", "\\n", "\\r", "\\t", "\\/", "\"", "\""]
						},
						"Json stringify (also escape '<', '>', '&')": {
							"find": ["\\\\", "\"", "\n", "\r", "\t", "<", ">", "&", "^", "$"],
							"replace": ["\\\\", "\\\"", "\\n", "\\r", "\\t", "\\u003c", "\\u003e", "\\u0026", "\"", "\""]
						},
						"Json-decode string (incomplete)": {
							"find": ["^\"", "\"$", "\\\\\\\\", "\\\\\"", "\\\\'", "\\\\n", "\\\\r", "\\\\t", "\\\\f", "\\\\b", "\\\\/", "\\\\u0026", "\\\\u003c", "\\\\u003e", "\u001f"],
							"replace": ["", "", "\u001f", "\"", "'", "\n", "\r", "\t", "\f", "\b", "/", "&", "<", ">", "\\"]
						},
						"Quote as C-string": {
							"find": ["\\\\", "\"", "\u0000", "\n", "^", "$"],
							"replace": ["\\\\", "\\\"", "\\0", "\\n", "\"", "\""]
						},
						"Quote as single-quoted string (only escape `\\`, `'`)": {
							"find": ["\\\\", "'", "^", "$"],
							"replace": ["\\\\", "\\'", "'", "'"]
						},
						"Split CSV into lines": {
							"find": ["\n", "[,:;|+]"],
							"replace": ["\n----\n", "\n"]
						},

						"Trim lines": {
							"find": "[ \t]*(.*?)[ \t]*(\n|$)",
							"replace": "$1$2"
						},
						"Join lines by comma": {
							"find": "\n[ \t]*",
							"replace": ", "
						},
						"Single-quote lines and join by comma": {
							"find": "(.+|(?=\n))\n?[ \t]*",
							"replace": "'$1', "
						},
						"Double-quote lines and join by comma": {
							"find": "(.+|(?=\n))\n?[ \t]*",
							"replace": "\"$1\", "
						}
					}
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"lint": "eslint src --ext ts",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/vscode": "^1.47.0",
		"@types/glob": "^7.1.1",
		"@types/mocha": "^7.0.2",
		"@types/node": "^13.11.0",
		"eslint": "^6.8.0",
		"@typescript-eslint/parser": "^2.30.0",
		"@typescript-eslint/eslint-plugin": "^2.30.0",
		"glob": "^7.1.6",
		"mocha": "^7.1.2",
		"typescript": "^3.8.3",
		"vscode-test": "^1.3.0"
	}
}
